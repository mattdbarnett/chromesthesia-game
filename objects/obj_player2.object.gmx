<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p2_norm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-111</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
global.press = 0
grav = 0.095;
hsp = 0;
vsp = 0;
jumpspeed = 3.5
movespeed = 2
global.check2 = 0
startx = x
starty = y

global.pers = false
global.corrosive2 = false
global.corrosivecheck2 = false





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.corrosive2 = !global.corrosive2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = 3.5
movespeed = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
 
if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Room Border Collision
if x &lt;  0
{
    x = 0
}
if x &gt; room_width
{
    x = room_width
}

if y &lt; 0 //0 being the top of the room
{
    y = 0
}
else if y &gt; room_height
{
    if instance_exists(obj_checkpoint2)
        {
        obj_player2.x = obj_checkpoint2.x
        obj_player2.y = obj_checkpoint2.y
        sprite_index = spr_p2_norm
        jumpspeed = 7;
        movespeed = 4;
        
        if instance_exists(obj_player1)
        {
        if instance_exists(obj_checkpoint1)
            {
            obj_player1.x = obj_checkpoint1.x
            obj_player1.y = obj_checkpoint1.y
                with obj_player1
                {
                jumpspeed = 7;
                movespeed = 4;
                sprite_index = spr_p1_norm
                }
            }
        else
            {
                with obj_player1
                    {
                    obj_player1.x = startx
                    obj_player1.y = starty
                    jumpspeed = 7;
                    movespeed = 4;
                    sprite_index = spr_p1_norm
                    }
            }
        }
        }
    else
        {
        room_restart()
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colour Collision

//Red Collison
if place_meeting(x+2,y,obj_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y+2,obj_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x-2,y,obj_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y-2,obj_red) 
    {
    sprite_index = spr_p2_red;
    }

if place_meeting(x+2,y,obj_but_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y+2,obj_but_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x-2,y,obj_but_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y-2,obj_but_red) 
    {
    sprite_index = spr_p2_red;
    }
    
if place_meeting(x+2,y,obj_touch_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y+2,obj_touch_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x-2,y,obj_touch_red) 
    {
    sprite_index = spr_p2_red;
    }
if place_meeting(x,y-2,obj_touch_red) 
    {
    sprite_index = spr_p2_red;
    }

    
//Blue Collison
if place_meeting(x+2,y,obj_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y+2,obj_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x-2,y,obj_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y-2,obj_blue) 
    {
    sprite_index = spr_p2_blue;
    }
    
if place_meeting(x+2,y,obj_but_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y+2,obj_but_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x-2,y,obj_but_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y-2,obj_but_blue) 
    {
    sprite_index = spr_p2_blue;
    }
    
if place_meeting(x+2,y,obj_touch_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y+2,obj_touch_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x-2,y,obj_touch_blue) 
    {
    sprite_index = spr_p2_blue;
    }
if place_meeting(x,y-2,obj_touch_blue) 
    {
    sprite_index = spr_p2_blue;
    }
    
//Orange Collison
if place_meeting(x+2,y,obj_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x,y+2,obj_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x-2,y,obj_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x,y-2,obj_orange) 
    {
    sprite_index = spr_p2_orange;
    }
    
if place_meeting(x+2,y,obj_but_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x,y+2,obj_but_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x-2,y,obj_but_orange) 
    {
    sprite_index = spr_p2_orange;
    }
if place_meeting(x,y-2,obj_but_orange) 
    {
    sprite_index = spr_p2_orange;
    }

//Yellow Collison
if place_meeting(x+2,y,obj_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x,y+2,obj_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x-2,y,obj_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x,y-2,obj_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
    
if place_meeting(x+2,y,obj_but_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x,y+2,obj_but_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x-2,y,obj_but_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
if place_meeting(x,y-2,obj_but_yellow) 
    {
    sprite_index = spr_p2_yellow;
    }
    
//LGreen Collison
if place_meeting(x+2,y,obj_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x,y+2,obj_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x-2,y,obj_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x,y-2,obj_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }

if place_meeting(x+2,y,obj_but_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x,y+2,obj_but_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x-2,y,obj_but_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
if place_meeting(x,y-2,obj_but_lgreen) 
    {
    sprite_index = spr_p2_lgreen;
    }
//Turq Collison
if place_meeting(x+2,y,obj_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x,y+2,obj_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x-2,y,obj_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x,y-2,obj_turq) 
    {
    sprite_index = spr_p2_turq;
    }
    
if place_meeting(x+2,y,obj_but_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x,y+2,obj_but_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x-2,y,obj_but_turq) 
    {
    sprite_index = spr_p2_turq;
    }
if place_meeting(x,y-2,obj_but_turq) 
    {
    sprite_index = spr_p2_turq;
    }
    
//Purple Collison
if place_meeting(x+2,y,obj_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x,y+2,obj_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x-2,y,obj_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x,y-2,obj_purple) 
    {
    sprite_index = spr_p2_purple;
    }
    
if place_meeting(x+2,y,obj_but_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x,y+2,obj_but_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x-2,y,obj_but_purple) 
    {
    sprite_index = spr_p2_purple;
    }
if place_meeting(x,y-2,obj_but_purple) 
    {
    sprite_index = spr_p2_purple;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Command Input

if keyboard_check(vk_pagedown)
    {
    if instance_exists(obj_checkpoint2)
        {
        obj_player2.x = obj_checkpoint2.x
        obj_player2.y = obj_checkpoint2.y
        sprite_index = spr_p2_norm
        jumpspeed = 3.5
        movespeed = 2
        
        if instance_exists(obj_player1)
        {
        if instance_exists(obj_checkpoint1)
            {
            obj_player1.x = obj_checkpoint1.x
            obj_player1.y = obj_checkpoint1.y
                with obj_player1
                {
                jumpspeed = 3.5
                movespeed = 2
                sprite_index = spr_p1_norm
                }
            }
        else
            {
                with obj_player1
                    {
                    obj_player1.x = startx
                    obj_player1.y = starty
                    jumpspeed = 3.5
                    movespeed = 2
                    sprite_index = spr_p1_norm
                    }
            }
        }
        }
    else
        {
        room_restart()
        }
    audio_play_sound(snd_select, 10, false)
    }
    
if keyboard_check_released(vk_pageup)
    {
    if global.check2 = 0
        {
        instance_create(x,y,obj_checkpoint2)
        global.check2 = 1
        }
    audio_play_sound(snd_select, 10, false)
    }
    
if keyboard_check(vk_insert)
    {
    sprite_index = spr_p2_norm
    audio_play_sound(snd_select, 10, false)
    }
    
//if keyboard_check_released(ord("P"))
  //  {
    //global.pers = !global.pers
    //audio_play_sound(snd_select, 10, false)
    //}
    
if keyboard_check_released(vk_delete)
    {
    global.corrosive2 = !global.corrosive2
    audio_play_sound(snd_select, 10, false)
    }

if keyboard_check_released(vk_escape)
    {
    room_goto(rm_menu_main)
    audio_play_sound(snd_select, 10, false)    
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Styles


//Default

if global.custom = 0
    {
    with obj_powerup
        {
        sprite_index = spr_powerup
        }
    }

//Halloween

if global.custom = 1
    {
    with obj_powerup
        {
        sprite_index = spr_powerup_h
        }
    background_index[0] = bkh;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pers = true
    {
    draw_set_font(fnt_16)
    draw_set_colour(c_black)
    draw_text(10,75,"P")
    }
displayY = window_get_height();
displayW = window_get_width();

if global.corrosive2 = false
    {
    draw_rectangle_color( displayW - 48, displayY - 48, displayW, displayY, c_black, c_black, c_black, c_black, false)
    draw_rectangle_color( displayW - 48, displayY - 48, displayW, displayY, c_blue, c_blue, c_blue, c_blue, true)
    }
if global.corrosive2 = true
    {
    draw_rectangle_color( displayW - 48, displayY - 48, displayW, displayY, c_blue, c_blue, c_blue, c_blue, false)
    draw_rectangle_color( displayW - 48, displayY - 48, displayW, displayY, c_black, c_black, c_black, c_black, true)
    draw_set_font(fnt_24)
    draw_set_colour(c_black)
    draw_text( displayW - 36, displayY - 46 ,"C")
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
